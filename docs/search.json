[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "Project 1",
    "section": "",
    "text": "Acknowledgements:\nI know this section usually comes at the end, but I would be remiss not to express my sincerest gratitude to Dr. Post and TA Gabby Taylor for their flexibility and support whilst I was sick and hospitalized. I am sincerely grateful for the opportunity to catch back up. Thank you.\n\nPlan of Attack\nFirstly, we’ll create the function for steps 1 and 2. Then the function for step 3. Then the 5&6 function. Then the final, step 4 function. Then we’ll put it in the wrapper and take care of the plotting functions later.\nFunction for steps 1 and 2\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\ndata_init&lt;- function(link, enrollment = \"enrollment\"){\n  dat&lt;- read.csv(url(link))\n  dat&lt;- dat %&gt;% select(Area_name,STCOU,ends_with(\"D\")) %&gt;% \n    rename(area_name = Area_name) %&gt;%\n    pivot_longer(\n      cols = -c(area_name, STCOU),\n      #names_to = \"area_name\",\n      values_to = enrollment\n    )\n  return(dat)\n}\n\nFunction for step 3\n\ndata_infograb&lt;- function(dat, enrollment = \"enrollment\"){\n  dat$year&lt;- substr(dat$enrollment,nchar(dat$enrollment)-1,nchar(dat$enrollment))\n  dat$meaurement&lt;- substr(dat$enrollment,1,7)\n  return(dat)\n}\n\nFunction for step 5\n\ndata_ifcounty_whatstate&lt;- function(dat){\n  dat$state&lt;- substr(dat$enrollment,nchar(dat$enrollment)-1,nchar(dat$enrollment))\n  return(dat)\n}\n\nFunction for step 6\n\ndata_ifnotcounty_whatdiv&lt;-function(dat){\n  dat$state&lt;- substr(dat$area_name, 1,2)\n  ifelse(dat$state %in% c(\"CT\",\"ME\",\"MA\",\"NH\",\"RI\",\"VT\"), \n         dat$division&lt;- \"Division 1\",\n         ifelse(dat$state %in% c(\"NJ\",\"NY\",\"PA\"),\n                dat$division&lt;- \"Division 2\",\n                ifelse(c(\"IL\",\"IN\",\"MI\",\"OH\",\"WI\"),\n                       dat$division&lt;- \"Division 3\",\n                       ifelse(dat$state %in% c(\"IA\",\"KS\",\"MN\",\"MO\",\"NE\",\"ND\",\"SD\"),\n                              dat$division&lt;- \"Division 4\",\n                              ifelse(dat$state %in% c(\"DE\",\"FL\",\"GA\",\"MD\",\"NC\",\"SC\",\"VA\",\"DC\",\"WV\"),\n                                     dat$division&lt;- \"Division 5\",\n                                     ifelse(dat$state %in% c(\"AL\",\"KY\",\"TN\",\"MS\"),\n                                            dat$division&lt;- \"Division 6\",\n                                            ifelse(dat$state %in% c(\"AK\",\"LA\",\"OK\",\"TX\"),\n                                                   dat$division&lt;- \"Division 7\",\n                                                   ifelse(dat$state %in% c(\"AZ\",\"CO\",\"ID\",\"MT\",\"NV\",\"NM\",\"UT\",\"WY\"),\n                                                          dat$division&lt;- \"Division 8\",\n                                                          ifelse(dat$state %in% c(\"AL\",\"CA\",\"HI\",\"OR\",\"WA\"),\n                                                                 dat$division&lt;- \"Division 9\", \"ERROR\")))))))))\n\n  return(dat)\n}\n\nFunction for step 4 (takes output for step 3 and calls 5 and 6, returns two tibbles)\n\ndata_4toend&lt;- function(dat){\n  county_dat&lt;- dat %&gt;% filter(STCOU %% 10 != 0)\n  noncounty_dat&lt;- dat %&gt;% filter(STCOU %% 10 == 0)\n  class(county_dat)&lt;- c(\"county\",class(county_dat))\n  class(noncounty_dat)&lt;- c(\"state\",class(noncounty_dat))\n  county_return&lt;- data_ifcounty_whatstate(county_dat)\n  noncounty_return&lt;-data_ifnotcounty_whatdiv(noncounty_dat)\n  listreturn&lt;- list(county_return,noncounty_return)\n  return(listreturn)\n}\n\nCreating the wrapper function\n\ndata_setup&lt;- function(link, enrollment = \"enrollment\"){\n  result&lt;- data_4toend(data_infograb(data_init(link, enrollment),enrollment))\n  #I nested it because my brain understands this better than trying to pipe it\n}\n\nCalling it for the first two URLs\n\nOneA&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\nOneB&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\")\n\nCreating the combiner function\n\ncombine&lt;- function(lista, listb){\n  countycombo&lt;- rbind(lista[[1]],listb[[1]])\n  noncountycombo&lt;- rbind(lista[[2]],listb[[2]])\n  combolist&lt;- list(countycombo, noncountycombo)\n  return(combolist)\n}\n\nCalling the combiner function\n\nfirst_two_combined&lt;- combine(OneA,OneB)\n\nCreating the plot.state function\n\nlibrary(ggplot2)\nplot.state&lt;- function(dat, enrollment = \"enrollment\"){\n  dat&lt;- dat %&gt;% filter(division != \"ERROR\") %&gt;% group_by(year, division) %&gt;%\n    summarise(value = mean(enrollment))\n  ggplot(dat, aes(x = year,y = value, color = division)) + geom_point()\n}\n\nCreating the plot.county function\n\nplot.county&lt;- function(dat, enrollment = \"enrollment\", state = \"NC\", performance = \"top\", how_many = 5){\n  dat&lt;- dat %&gt;% \n    filter(state == state)  %&gt;%\n    group_by(area_name) %&gt;%\n    summarise(value = mean(enrollment))\n  if (performance == \"top\"){\n    arrange(dat, desc(enrollment))\n  } else if (performance == \"bottom\"){\n    arrange(dat, enrollment)\n  } else {\n    return(\"ERROR: PERFORMANCE CAN ONLY BE top OR bottom\")\n  }\n  \n  datforplot&lt;- head(dat, how_many)\n  ggplot(datforplot, aes(x = area_name, y = value)) + geom_point()\n    \n}\n\nPut it Together\n\nOneA&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\nOneB&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\")\nfirst_two_combined&lt;- combine(OneA,OneB)\nplot.state(first_two_combined[[2]])\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nplot.county(first_two_combined[[1]],state = \"NC\", performance = \"top\", how_many = 20)\n\n\n\n\n\n\n\nplot.county(first_two_combined[[1]],state = \"SC\", performance = \"bottom\", how_many = 7)\n\n\n\n\n\n\n\nplot.county(first_two_combined[[1]])\n\n\n\n\n\n\n\nplot.county(first_two_combined[[1]],state = \"PA\", performance = \"top\", how_many = 8)\n\n\n\n\n\n\n\n#NEW URLS\nA&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv\")\nB&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv\")\nC&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv\")\nD&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv\")\n\nAB&lt;- combine(A,B)\nCD&lt;- combine(C,D)\nABCD&lt;- combine(AB,CD)\nplot.state(ABCD[[2]])\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nplot.county(ABCD[[1]], state = \"CA\", performance = \"top\", how_many = 15)\n\n\n\n\n\n\n\nplot.county(ABCD[[1]], state = \"TX\", performance = \"top\", how_many = 4)\n\n\n\n\n\n\n\nplot.county(ABCD[[1]])\n\n\n\n\n\n\n\nplot.county(ABCD[[1]], state = \"NY\", performance = \"top\", how_many = 10)"
  },
  {
    "objectID": "Project1.html#project-1",
    "href": "Project1.html#project-1",
    "title": "Project 1",
    "section": "",
    "text": "Acknowledgements:\nI know this section usually comes at the end, but I would be remiss not to express my sincerest gratitude to Dr. Post and TA Gabby Taylor for their flexibility and support whilst I was sick and hospitalized. I am sincerely grateful for the opportunity to catch back up. Thank you.\n\nPlan of Attack\nFirstly, we’ll create the function for steps 1 and 2. Then the function for step 3. Then the 5&6 function. Then the final, step 4 function. Then we’ll put it in the wrapper and take care of the plotting functions later.\nFunction for steps 1 and 2\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\ndata_init&lt;- function(link, enrollment = \"enrollment\"){\n  dat&lt;- read.csv(url(link))\n  dat&lt;- dat %&gt;% select(Area_name,STCOU,ends_with(\"D\")) %&gt;% \n    rename(area_name = Area_name) %&gt;%\n    pivot_longer(\n      cols = -c(area_name, STCOU),\n      #names_to = \"area_name\",\n      values_to = enrollment\n    )\n  return(dat)\n}\n\nFunction for step 3\n\ndata_infograb&lt;- function(dat, enrollment = \"enrollment\"){\n  dat$year&lt;- substr(dat$enrollment,nchar(dat$enrollment)-1,nchar(dat$enrollment))\n  dat$meaurement&lt;- substr(dat$enrollment,1,7)\n  return(dat)\n}\n\nFunction for step 5\n\ndata_ifcounty_whatstate&lt;- function(dat){\n  dat$state&lt;- substr(dat$enrollment,nchar(dat$enrollment)-1,nchar(dat$enrollment))\n  return(dat)\n}\n\nFunction for step 6\n\ndata_ifnotcounty_whatdiv&lt;-function(dat){\n  dat$state&lt;- substr(dat$area_name, 1,2)\n  ifelse(dat$state %in% c(\"CT\",\"ME\",\"MA\",\"NH\",\"RI\",\"VT\"), \n         dat$division&lt;- \"Division 1\",\n         ifelse(dat$state %in% c(\"NJ\",\"NY\",\"PA\"),\n                dat$division&lt;- \"Division 2\",\n                ifelse(c(\"IL\",\"IN\",\"MI\",\"OH\",\"WI\"),\n                       dat$division&lt;- \"Division 3\",\n                       ifelse(dat$state %in% c(\"IA\",\"KS\",\"MN\",\"MO\",\"NE\",\"ND\",\"SD\"),\n                              dat$division&lt;- \"Division 4\",\n                              ifelse(dat$state %in% c(\"DE\",\"FL\",\"GA\",\"MD\",\"NC\",\"SC\",\"VA\",\"DC\",\"WV\"),\n                                     dat$division&lt;- \"Division 5\",\n                                     ifelse(dat$state %in% c(\"AL\",\"KY\",\"TN\",\"MS\"),\n                                            dat$division&lt;- \"Division 6\",\n                                            ifelse(dat$state %in% c(\"AK\",\"LA\",\"OK\",\"TX\"),\n                                                   dat$division&lt;- \"Division 7\",\n                                                   ifelse(dat$state %in% c(\"AZ\",\"CO\",\"ID\",\"MT\",\"NV\",\"NM\",\"UT\",\"WY\"),\n                                                          dat$division&lt;- \"Division 8\",\n                                                          ifelse(dat$state %in% c(\"AL\",\"CA\",\"HI\",\"OR\",\"WA\"),\n                                                                 dat$division&lt;- \"Division 9\", \"ERROR\")))))))))\n\n  return(dat)\n}\n\nFunction for step 4 (takes output for step 3 and calls 5 and 6, returns two tibbles)\n\ndata_4toend&lt;- function(dat){\n  county_dat&lt;- dat %&gt;% filter(STCOU %% 10 != 0)\n  noncounty_dat&lt;- dat %&gt;% filter(STCOU %% 10 == 0)\n  class(county_dat)&lt;- c(\"county\",class(county_dat))\n  class(noncounty_dat)&lt;- c(\"state\",class(noncounty_dat))\n  county_return&lt;- data_ifcounty_whatstate(county_dat)\n  noncounty_return&lt;-data_ifnotcounty_whatdiv(noncounty_dat)\n  listreturn&lt;- list(county_return,noncounty_return)\n  return(listreturn)\n}\n\nCreating the wrapper function\n\ndata_setup&lt;- function(link, enrollment = \"enrollment\"){\n  result&lt;- data_4toend(data_infograb(data_init(link, enrollment),enrollment))\n  #I nested it because my brain understands this better than trying to pipe it\n}\n\nCalling it for the first two URLs\n\nOneA&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\nOneB&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\")\n\nCreating the combiner function\n\ncombine&lt;- function(lista, listb){\n  countycombo&lt;- rbind(lista[[1]],listb[[1]])\n  noncountycombo&lt;- rbind(lista[[2]],listb[[2]])\n  combolist&lt;- list(countycombo, noncountycombo)\n  return(combolist)\n}\n\nCalling the combiner function\n\nfirst_two_combined&lt;- combine(OneA,OneB)\n\nCreating the plot.state function\n\nlibrary(ggplot2)\nplot.state&lt;- function(dat, enrollment = \"enrollment\"){\n  dat&lt;- dat %&gt;% filter(division != \"ERROR\") %&gt;% group_by(year, division) %&gt;%\n    summarise(value = mean(enrollment))\n  ggplot(dat, aes(x = year,y = value, color = division)) + geom_point()\n}\n\nCreating the plot.county function\n\nplot.county&lt;- function(dat, enrollment = \"enrollment\", state = \"NC\", performance = \"top\", how_many = 5){\n  dat&lt;- dat %&gt;% \n    filter(state == state)  %&gt;%\n    group_by(area_name) %&gt;%\n    summarise(value = mean(enrollment))\n  if (performance == \"top\"){\n    arrange(dat, desc(enrollment))\n  } else if (performance == \"bottom\"){\n    arrange(dat, enrollment)\n  } else {\n    return(\"ERROR: PERFORMANCE CAN ONLY BE top OR bottom\")\n  }\n  \n  datforplot&lt;- head(dat, how_many)\n  ggplot(datforplot, aes(x = area_name, y = value)) + geom_point()\n    \n}\n\nPut it Together\n\nOneA&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\nOneB&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\")\nfirst_two_combined&lt;- combine(OneA,OneB)\nplot.state(first_two_combined[[2]])\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nplot.county(first_two_combined[[1]],state = \"NC\", performance = \"top\", how_many = 20)\n\n\n\n\n\n\n\nplot.county(first_two_combined[[1]],state = \"SC\", performance = \"bottom\", how_many = 7)\n\n\n\n\n\n\n\nplot.county(first_two_combined[[1]])\n\n\n\n\n\n\n\nplot.county(first_two_combined[[1]],state = \"PA\", performance = \"top\", how_many = 8)\n\n\n\n\n\n\n\n#NEW URLS\nA&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv\")\nB&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv\")\nC&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv\")\nD&lt;- data_setup(\"https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv\")\n\nAB&lt;- combine(A,B)\nCD&lt;- combine(C,D)\nABCD&lt;- combine(AB,CD)\nplot.state(ABCD[[2]])\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nplot.county(ABCD[[1]], state = \"CA\", performance = \"top\", how_many = 15)\n\n\n\n\n\n\n\nplot.county(ABCD[[1]], state = \"TX\", performance = \"top\", how_many = 4)\n\n\n\n\n\n\n\nplot.county(ABCD[[1]])\n\n\n\n\n\n\n\nplot.county(ABCD[[1]], state = \"NY\", performance = \"top\", how_many = 10)"
  }
]